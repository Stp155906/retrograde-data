# -*- coding: utf-8 -*-
"""update_retrogrades.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yvxjLieUoi44NJg9vwteiYF5L9Qa95tp
"""

import requests
import urllib.parse
import json
import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed

def fetch_ephemeris_data(start_time, stop_time, step_size, planet):
    url = ('https://ssd.jpl.nasa.gov/api/horizons.api?format=text' +
           '&COMMAND=' + urllib.parse.quote("'" + planet + "'") +
           '&EPHEM_TYPE=' + urllib.parse.quote("'OBSERVER'") +
           '&CENTER=' + urllib.parse.quote("'500@399'") +
           '&START_TIME=' + urllib.parse.quote("'" + start_time + "'") +
           '&STOP_TIME=' + urllib.parse.quote("'" + stop_time + "'") +
           '&STEP_SIZE=' + urllib.parse.quote("'" + step_size + "'") +
           '&QUANTITIES=' + urllib.parse.quote("'1,2'"))

    response = requests.get(url)
    content = response.text

    return content

def process_ephemeris_data(content):
    lines = content.split('\n')
    data = []
    start_data = False
    for line in lines:
        if line.startswith('$$SOE'):
            start_data = True
            continue
        if line.startswith('$$EOE'):
            break
        if start_data:
            fields = line.strip().split()
            if len(fields) >= 14:
                data.append({
                    'date': fields[0] + ' ' + fields[1],
                    'ra_icrf': fields[2] + ' ' + fields[3] + ' ' + fields[4],
                    'dec_icrf': fields[5] + ' ' + fields[6] + ' ' + fields[7],
                    'ra_apparent': fields[8] + ' ' + fields[9] + ' ' + fields[10],
                    'dec_apparent': fields[11] + ' ' + fields[12] + ' ' + fields[13]
                })
    return data

def convert_ra_to_decimal(ra):
    parts = ra.split(' ')
    hours = float(parts[0])
    minutes = float(parts[1])
    seconds = float(parts[2])
    return hours * 15.0 + minutes / 4.0 + seconds / 240.0

def detect_retrograde(data):
    retrograde = False
    previous_ra = None
    if not data:
        return retrograde
    for entry in data:
        current_ra = convert_ra_to_decimal(entry['ra_icrf'])
        if previous_ra is not None and current_ra < previous_ra:
            retrograde = True
            break
        previous_ra = current_ra
    return retrograde

def fetch_and_process_data(date):
    print(f'Processing data for date: {date}')
    planet_names = {
        '199': 'Mercury',
        '299': 'Venus',
        '399': 'Earth',
        '499': 'Mars',
        '599': 'Jupiter',
        '699': 'Saturn',
        '799': 'Uranus',
        '899': 'Neptune',
        '999': 'Pluto'
    }

    start_time = date + ' 00:00'
    stop_time = date + ' 23:59'
    step_size = '1h'  # Step size of 1 hour

    retrogrades = []

    for planet in planet_names:
        raw_planet_data = fetch_ephemeris_data(start_time, stop_time, step_size, planet)
        processed_planet_data = process_ephemeris_data(raw_planet_data)
        is_retrograde = detect_retrograde(processed_planet_data)
        if is_retrograde:
            retrogrades.append({
                'date': date,
                'body': planet_names[planet]
            })

    return retrogrades

def generate_dates(start_date, months=12):
    dates = []
    for month in range(months):
        for day in range(1, 32):
            try:
                date = start_date + datetime.timedelta(days=month*30 + day)
                dates.append(date.isoformat())
            except ValueError:
                continue
    return dates

def main():
    start_date = datetime.date.today()
    months = 12
    dates = generate_dates(start_date, months)

    all_retrogrades = []

    with ThreadPoolExecutor(max_workers=5) as executor:
        future_to_date = {executor.submit(fetch_and_process_data, date): date for date in dates}
        for future in as_completed(future_to_date):
            date = future_to_date[future]
            try:
                retrogrades = future.result()
                if retrogrades:
                    all_retrogrades.extend(retrogrades)
            except Exception as exc:
                print(f'{date} generated an exception: {exc}')

    with open('retrogrades.json', 'w') as f:
        json.dump(all_retrogrades, f, indent=2)

if __name__ == "__main__":
    main()